type UserWithId = 
 record {
   country: opt text;
   id: principal;
   name: opt text;
   points: float64;
 };
type UserPayload = 
 record {
   country: opt text;
   id: opt principal;
   name: opt text;
 };
type UserCompletedTaskResult = 
 record {
   completedAt: text;
   receivedPoints: float64;
   task: Task;
   taskId: Id;
   userId: principal;
 };
type UserCompletedTask = 
 record {
   completedAt: text;
   receivedPoints: float64;
   taskId: Id;
   userId: principal;
 };
type UserAchievementResult = 
 record {
   achievement: Achievement;
   achievementId: Id;
   completedAt: text;
   receivedPoints: float64;
   userId: principal;
 };
type UserAchievement = 
 record {
   achievementId: Id;
   completedAt: text;
   receivedPoints: float64;
   userId: principal;
 };
type TimeOfDay = 
 variant {
   Afternoon;
   Evening;
   Morning;
 };
type TaskWithId = 
 record {
   description: text;
   difficultyFactor: float64;
   emoji: text;
   id: Id;
   maxValue: float64;
   taskType: TaskType;
   timeEnd: text;
   timeOfDay: TimeOfDay;
   timeStart: text;
   title: text;
 };
type TaskType = 
 variant {
   DistanceBased;
   StepBased;
   TimeBased;
 };
type Task = 
 record {
   description: text;
   difficultyFactor: float64;
   emoji: text;
   maxValue: float64;
   taskType: TaskType;
   timeEnd: text;
   timeOfDay: TimeOfDay;
   timeStart: text;
   title: text;
 };
type RewardWithId = 
 record {
   id: Id;
   name: text;
   points: float64;
 };
type Result = 
 variant {
   err: MessageResult;
   ok: MessageResult;
 };
type PostWithId = 
 record {
   content: text;
   id: Id;
   image: text;
   place: text;
   points: float64;
   taskId: Id;
   userId: principal;
 };
type PostPayload = 
 record {
   content: text;
   image: text;
   place: text;
   taskId: Id;
 };
type PostLike = 
 record {
   postId: Id;
   userId: principal;
 };
type PostComplete = 
 record {
   awards: nat;
   content: text;
   id: Id;
   image: text;
   likes: nat;
   place: text;
   points: float64;
   taskId: Id;
   userId: principal;
 };
type PostAward = 
 record {
   postId: Id;
   userId: principal;
 };
type MessageResult = record {message: text;};
type Id = text;
type AchievementWithId = 
 record {
   description: text;
   emoji: text;
   id: Id;
   name: text;
   points: float64;
 };
type Achievement = 
 record {
   description: text;
   emoji: text;
   name: text;
   points: float64;
 };
service : {
  _init: () -> ();
  addAchievementToUser:
   (record {
      achievementId: Id;
      userId: opt principal;
    }) -> (Result);
  awardPost: (record {postId: Id;}) -> (Result);
  claimAllPoints: () -> (Result);
  claimPointsByPost: (record {postId: Id;}) -> (Result);
  completeTask: (record {taskId: Id;}) -> (Result);
  createPost: (PostPayload) -> (Result);
  getAchievementsByUser: (record {userId: opt principal;}) ->
   (vec record {
          Id;
          UserAchievementResult;
        });
  getAllAchievements: () -> (vec record {
                                   Id;
                                   AchievementWithId;
                                 });
  getAllPostAwards: () -> (vec record {
                                 Id;
                                 PostAward;
                               });
  getAllPostLikes: () -> (vec record {
                                Id;
                                PostLike;
                              });
  getAllPosts: () -> (vec record {
                            Id;
                            PostComplete;
                          });
  getAllRewards: () -> (vec record {
                              Id;
                              RewardWithId;
                            });
  getAllTasks: () -> (vec record {
                            Id;
                            TaskWithId;
                          });
  getAllUserAchievements: () -> (vec record {
                                       Id;
                                       UserAchievement;
                                     });
  getAllUserCompletedTasks: () -> (vec record {
                                         Id;
                                         UserCompletedTask;
                                       });
  getAllUsers: () -> (vec record {
                            principal;
                            UserWithId;
                          });
  getAwardsByPost: (record {postId: Id;}) -> (vec record {
                                                    Id;
                                                    PostAward;
                                                  });
  getCompletedTasksByUser: (record {userId: opt principal;}) ->
   (vec record {
          Id;
          UserCompletedTaskResult;
        });
  getLikesByPost: (record {postId: Id;}) -> (vec record {
                                                   Id;
                                                   PostLike;
                                                 });
  getPostById: (record {id: Id;}) -> (opt PostWithId);
  getPostsByUser: (record {userId: opt principal;}) ->
   (vec record {
          Id;
          PostWithId;
        });
  getTaskById: (record {id: Id;}) -> (opt TaskWithId);
  getUser: (record {id: opt principal;}) -> (UserWithId);
  likeOrDislikePost: (record {postId: Id;}) -> (Result);
  updateOrCreateUser: (UserPayload) -> (Result);
  updatePostContent: (record {
                        content: text;
                        postId: Id;
                      }) -> (Result);
  whoami: () -> (principal);
}
