type UserWithId = 
 record {
   country: opt text;
   createdAt: text;
   id: principal;
   name: opt text;
   points: float64;
 };
type UserResult = 
 record {
   achievements: nat;
   country: opt text;
   createdAt: text;
   id: principal;
   name: opt text;
   points: float64;
 };
type UserPayload = 
 record {
   country: opt text;
   id: opt principal;
   name: opt text;
 };
type UserCompletedTaskResult = 
 record {
   completedAt: text;
   receivedPoints: float64;
   task: Task;
   taskId: Id;
   userId: principal;
 };
type UserCompletedTask = 
 record {
   completedAt: text;
   receivedPoints: float64;
   taskId: Id;
   userId: principal;
 };
type UserAchievementResult = 
 record {
   achievement: Achievement;
   achievementId: Id;
   completedAt: text;
   receivedPoints: float64;
   userId: principal;
 };
type UserAchievement = 
 record {
   achievementId: Id;
   completedAt: text;
   receivedPoints: float64;
   userId: principal;
 };
type UpdateTaskPayload = 
 record {
   description: opt text;
   difficultyFactor: opt float64;
   emoji: opt text;
   id: Id;
   maxValue: opt float64;
   taskType: opt TaskType;
   timeEnd: opt text;
   timeOfDay: opt TimeOfDay;
   timeStart: opt text;
   title: opt text;
 };
type TimeOfDay = 
 variant {
   Afternoon;
   Evening;
   Morning;
 };
type TaskWithId = 
 record {
   description: text;
   difficultyFactor: float64;
   emoji: text;
   id: Id;
   maxValue: float64;
   taskType: TaskType;
   timeEnd: text;
   timeOfDay: TimeOfDay;
   timeStart: text;
   title: text;
 };
type TaskType = 
 variant {
   DistanceBased;
   StepBased;
   TimeBased;
 };
type Task = 
 record {
   description: text;
   difficultyFactor: float64;
   emoji: text;
   maxValue: float64;
   taskType: TaskType;
   timeEnd: text;
   timeOfDay: TimeOfDay;
   timeStart: text;
   title: text;
 };
type RewardWithId = 
 record {
   code: text;
   id: Id;
   name: text;
   points: float64;
 };
type Result_3 = 
 variant {
   err: MessageResult;
   ok: record {
         message: text;
         userAchievement: UserAchievement;
       };
 };
type Result_2 = 
 variant {
   err: MessageResult;
   ok: record {
         message: text;
         userCompletedTask: UserCompletedTask;
       };
 };
type Result_1 = 
 variant {
   err: MessageResult;
   ok: record {
         message: text;
         user: opt UserWithId;
       };
 };
type Result = 
 variant {
   err: MessageResult;
   ok: MessageResult;
 };
type PostWithId = 
 record {
   content: text;
   id: Id;
   imageKey: text;
   points: float64;
   taskId: Id;
   title: text;
   userId: principal;
 };
type PostResult = 
 record {
   awards: nat;
   content: text;
   id: Id;
   imageKey: text;
   isAwarded: bool;
   isLiked: bool;
   likes: nat;
   points: float64;
   task: opt TaskWithId;
   taskId: Id;
   title: text;
   userId: principal;
 };
type PostPayload = 
 record {
   content: text;
   imageKey: text;
   taskId: Id;
   title: text;
 };
type PostLike = 
 record {
   postId: Id;
   userId: principal;
 };
type PostAward = 
 record {
   awardType: AwardType;
   postId: Id;
   receivedPoints: float64;
   userId: principal;
 };
type MessageResult = record {message: text;};
type LikeType = 
 variant {
   Dislike;
   Like;
 };
type Id = text;
type CreateTaskPayload = 
 record {
   description: text;
   difficultyFactor: float64;
   emoji: text;
   maxValue: float64;
   taskType: TaskType;
   timeEnd: text;
   timeOfDay: TimeOfDay;
   timeStart: text;
   title: text;
 };
type AwardType = 
 variant {
   Bronze;
   Gold;
   Silver;
 };
type AchievementResult = 
 record {
   description: text;
   emoji: text;
   id: Id;
   name: text;
   points: float64;
   userAchievement: opt UserAchievement;
 };
type Achievement = 
 record {
   description: text;
   emoji: text;
   name: text;
   points: float64;
 };
service : {
  _init: () -> ();
  addAchievementToUser:
   (record {
      achievementId: Id;
      userId: opt principal;
    }) -> (Result_3);
  awardPost: (record {
                awardType: AwardType;
                postId: Id;
              }) -> (Result);
  claimAllPoints: () -> (Result);
  claimPointsByPost: (record {postId: Id;}) -> (Result);
  completeTask: (record {taskId: Id;}) -> (Result_2);
  createPost: (PostPayload) -> (Result);
  createTask: (CreateTaskPayload) -> (Result);
  deletePost: (record {postId: Id;}) -> (Result);
  getAchievementsByUser: (record {userId: opt principal;}) ->
   (vec UserAchievementResult);
  getAllAchievements: () -> (vec AchievementResult);
  getAllPostAwards: () -> (vec PostAward);
  getAllPostLikes: () -> (vec PostLike);
  getAllPosts: () -> (vec PostResult);
  getAllRewards: () -> (vec RewardWithId);
  getAllTasks: () -> (vec TaskWithId);
  getAllTasksToday: () -> (vec TaskWithId);
  getAllUserAchievements: () -> (vec UserAchievement);
  getAllUserCompletedTasks: () -> (vec UserCompletedTask);
  getAllUsers: () -> (vec UserWithId);
  getAwardsByPost: (record {postId: Id;}) -> (vec PostAward);
  getCompletedTasksByUser: (record {userId: opt principal;}) ->
   (vec UserCompletedTaskResult);
  getLikesByPost: (record {postId: Id;}) -> (vec PostLike);
  getPostAwardsByUser: (record {userId: opt principal;}) -> (vec PostResult);
  getPostById: (record {id: Id;}) -> (opt PostWithId);
  getPostLikesByUser: (record {userId: opt principal;}) -> (vec PostResult);
  getPostsByUser: (record {userId: opt principal;}) -> (vec PostResult);
  getTaskById: (record {id: Id;}) -> (opt TaskWithId);
  getUser: (record {id: opt principal;}) -> (UserResult);
  likeOrDislikePost: (record {
                        likeType: LikeType;
                        postId: Id;
                      }) -> (Result);
  redeemReward: (record {code: text;}) -> (Result);
  updateOrCreateUser: (UserPayload) -> (Result_1);
  updatePostContent: (record {
                        content: text;
                        postId: Id;
                      }) -> (Result);
  updateTask: (UpdateTaskPayload) -> (Result);
  whoami: () -> (principal);
}
